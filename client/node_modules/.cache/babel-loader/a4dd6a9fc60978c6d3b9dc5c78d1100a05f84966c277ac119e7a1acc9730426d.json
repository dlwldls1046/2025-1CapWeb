{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\openu\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\\\uD559\\uAD50\\\\clo\\\\2025-1CapWeb\\\\client\\\\src\\\\pages\\\\Register.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Register() {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [verificationCode, setVerificationCode] = useState('');\n  const [codeSent, setCodeSent] = useState(false);\n  const [codeInput, setCodeInput] = useState('');\n  const [verified, setVerified] = useState(false);\n  const [msg, setMsg] = useState('');\n  const handleSignupRequest = async () => {\n    if (!email || !password || !confirmPassword) {\n      setMsg('모든 항목을 입력해주세요');\n      return;\n    }\n    if (password !== confirmPassword) {\n      setMsg('비밀번호가 일치하지 않습니다');\n      return;\n    }\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/send-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (!res.ok) {\n        const text = await res.text();\n        console.error('❌ 실패 응답:', text);\n        setMsg('코드 전송에 실패했습니다');\n        return;\n      }\n      const data = await res.json();\n      console.log('✅ 인증코드 전송 성공', data);\n      setVerificationCode(data.code); // 실제 서비스에서는 이 줄은 제거해야 함\n      setCodeSent(true);\n      setMsg('이메일로 코드가 전송되었습니다');\n    } catch (err) {\n      console.error('❌ 네트워크 오류:', err);\n      setMsg('서버와의 연결에 실패했습니다');\n    }\n  };\n  const handleRegister = async () => {\n    if (!codeSent) {\n      setMsg('이메일 인증을 먼저 진행해주세요');\n      return;\n    }\n    if (codeInput !== verificationCode) {\n      setMsg('인증 코드가 일치하지 않습니다');\n      return;\n    }\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const text = await res.text();\n      console.log('✅ 최종 회원가입 응답:', text);\n      setMsg(text);\n    } catch (err) {\n      console.error('❌ 회원가입 요청 실패:', err);\n      setMsg('회원가입 중 오류 발생');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"\\uC774\\uBA54\\uC77C\",\n      value: email,\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n      value: confirmPassword,\n      onChange: e => setConfirmPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), !codeSent && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSignupRequest,\n      children: \"\\uD68C\\uC6D0\\uAC00\\uC785\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), codeSent && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC774\\uBA54\\uC77C\\uB85C \\uCF54\\uB4DC\\uAC00 \\uC804\\uC1A1\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uC778\\uC99D\\uCF54\\uB4DC \\uC785\\uB825\",\n        value: codeInput,\n        onChange: e => setCodeInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRegister,\n        children: \"\\uCD5C\\uC885 \\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Register, \"MR8fNbC1FAFd5JCYlhp2rFVdu/k=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Register","_s","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","verificationCode","setVerificationCode","codeSent","setCodeSent","codeInput","setCodeInput","verified","setVerified","msg","setMsg","handleSignupRequest","res","fetch","method","headers","body","JSON","stringify","ok","text","console","error","data","json","log","code","err","handleRegister","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/openu/OneDrive/바탕 화면/학교/clo/2025-1CapWeb/client/src/pages/Register.jsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nfunction Register() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [verificationCode, setVerificationCode] = useState('');\r\n  const [codeSent, setCodeSent] = useState(false);\r\n  const [codeInput, setCodeInput] = useState('');\r\n  const [verified, setVerified] = useState(false);\r\n  const [msg, setMsg] = useState('');\r\n\r\n  const handleSignupRequest = async () => {\r\n    if (!email || !password || !confirmPassword) {\r\n      setMsg('모든 항목을 입력해주세요');\r\n      return;\r\n    }\r\n    if (password !== confirmPassword) {\r\n      setMsg('비밀번호가 일치하지 않습니다');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/auth/send-code', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email })\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const text = await res.text();\r\n        console.error('❌ 실패 응답:', text);\r\n        setMsg('코드 전송에 실패했습니다');\r\n        return;\r\n      }\r\n\r\n      const data = await res.json();\r\n      console.log('✅ 인증코드 전송 성공', data);\r\n      setVerificationCode(data.code); // 실제 서비스에서는 이 줄은 제거해야 함\r\n      setCodeSent(true);\r\n      setMsg('이메일로 코드가 전송되었습니다');\r\n    } catch (err) {\r\n      console.error('❌ 네트워크 오류:', err);\r\n      setMsg('서버와의 연결에 실패했습니다');\r\n    }\r\n  };\r\n\r\n  const handleRegister = async () => {\r\n    if (!codeSent) {\r\n      setMsg('이메일 인증을 먼저 진행해주세요');\r\n      return;\r\n    }\r\n    if (codeInput !== verificationCode) {\r\n      setMsg('인증 코드가 일치하지 않습니다');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      const text = await res.text();\r\n      console.log('✅ 최종 회원가입 응답:', text);\r\n      setMsg(text);\r\n    } catch (err) {\r\n      console.error('❌ 회원가입 요청 실패:', err);\r\n      setMsg('회원가입 중 오류 발생');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>회원가입</h2>\r\n      <input\r\n        type=\"email\"\r\n        placeholder=\"이메일\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n      /><br />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"비밀번호\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      /><br />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"비밀번호 확인\"\r\n        value={confirmPassword}\r\n        onChange={(e) => setConfirmPassword(e.target.value)}\r\n      /><br />\r\n\r\n      {!codeSent && (\r\n        <button onClick={handleSignupRequest}>회원가입하기</button>\r\n      )}\r\n\r\n      {codeSent && (\r\n        <>\r\n          <p>이메일로 코드가 전송되었습니다.</p>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"인증코드 입력\"\r\n            value={codeInput}\r\n            onChange={(e) => setCodeInput(e.target.value)}\r\n          /><br />\r\n          <button onClick={handleRegister}>최종 회원가입</button>\r\n        </>\r\n      )}\r\n\r\n      <p>{msg}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}